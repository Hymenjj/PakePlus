{"name":"hanime1","url":"https://hanime1.me/","showName":"hanime1","appid":"com.hanime1.app","icon":"","iconRound":true,"state":true,"single":true,"injectJq":true,"tauriApi":false,"devbug":true,"version":"0.0.2","preview":"desktop","platform":["1-1","1-2","2-1","2-2","3-1","3-2"],"width":800,"height":600,"desc":"","jsFile":[],"filterCss":"","customJs":"// Hanime1.me 增强功能脚本\n// 为网站添加各种便利功能\n\n(function() {\n    'use strict';\n    \n    // 配置对象\n    const config = {\n        downloadDir: localStorage.getItem('hanime_download_dir') || 'Downloads',\n        playbackSpeed: 1,\n        currentPlaylist: [],\n        currentIndex: 0,\n        isInPlaylist: false\n    };\n    \n    // 创建设置面板\n    function createSettingsPanel() {\n        const panel = document.createElement('div');\n        panel.id = 'hanime-settings-panel';\n        panel.style.cssText = `\n            position: fixed;\n            top: 20px;\n            right: 20px;\n            width: 300px;\n            background: #2a2a2a;\n            border: 1px solid #444;\n            border-radius: 8px;\n            padding: 20px;\n            z-index: 10000;\n            color: white;\n            font-family: Arial, sans-serif;\n            display: none;\n        `;\n        \n        panel.innerHTML = `\n            <h3 style=\"margin-top: 0;\">设置</h3>\n            <div style=\"margin-bottom: 15px;\">\n                <label>下载目录:</label><br>\n                <div style=\"margin: 5px 0;\">\n                    <select id=\"preset-dir-select\" style=\"width: 100%; padding: 5px; background: #333; color: white; border: 1px solid #555; margin-bottom: 5px;\">\n                        <option value=\"\">选择预设目录...</option>\n                        <option value=\"Downloads\">Downloads</option>\n                        <option value=\"Desktop\">桌面 (Desktop)</option>\n                        <option value=\"Documents\">文档 (Documents)</option>\n                        <option value=\"Videos\">视频 (Videos)</option>\n                        <option value=\"D:\\\\Downloads\">D:\\\\Downloads</option>\n                        <option value=\"E:\\\\Downloads\">E:\\\\Downloads</option>\n                        <option value=\"C:\\\\Users\\\\${navigator.userAgent.includes('Windows') ? '%USERNAME%' : 'user'}\\\\Downloads\">用户下载文件夹</option>\n                        <option value=\"custom\">自定义路径...</option>\n                    </select>\n                </div>\n                <div style=\"margin: 5px 0;\">\n                    <button id=\"browse-dir-btn\" style=\"width: 100%; padding: 8px; background: #28a745; color: white; border: none; border-radius: 4px; cursor: pointer; margin-bottom: 5px;\">\n                        📁 浏览选择目录\n                    </button>\n                    <input type=\"file\" id=\"dir-picker\" webkitdirectory directory style=\"display: none;\">\n                </div>\n                <input type=\"text\" id=\"download-dir-input\" value=\"${config.downloadDir}\" \n                       style=\"width: 100%; padding: 5px; background: #333; color: white; border: 1px solid #555;\" \n                       placeholder=\"输入自定义下载路径...\">\n                <div style=\"margin-top: 5px; font-size: 11px; color: #aaa;\">\n                    💡 提示: 可选择预设目录或输入自定义路径\n                </div>\n            </div>\n            <button id=\"save-settings\" style=\"background: #007bff; color: white; border: none; padding: 8px 16px; border-radius: 4px; cursor: pointer;\">保存</button>\n            <button id=\"close-settings\" style=\"background: #6c757d; color: white; border: none; padding: 8px 16px; border-radius: 4px; cursor: pointer; margin-left: 10px;\">关闭</button>\n        `;\n        \n        document.body.appendChild(panel);\n        \n        // 绑定事件\n        document.getElementById('preset-dir-select').onchange = (e) => {\n            const selectedValue = e.target.value;\n            const inputField = document.getElementById('download-dir-input');\n            \n            if (selectedValue && selectedValue !== 'custom') {\n                // 处理Windows环境变量\n                let processedPath = selectedValue;\n                if (selectedValue.includes('%USERNAME%')) {\n                    // 在实际使用时，这个会被浏览器或下载管理器处理\n                    processedPath = selectedValue.replace('%USERNAME%', 'User');\n                }\n                inputField.value = processedPath;\n                inputField.style.backgroundColor = '#2a4a2a'; // 绿色提示已选择\n                \n                // 2秒后恢复原色\n                setTimeout(() => {\n                    inputField.style.backgroundColor = '#333';\n                }, 2000);\n            } else if (selectedValue === 'custom') {\n                inputField.focus();\n                inputField.style.backgroundColor = '#4a4a2a'; // 黄色提示输入自定义\n                \n                setTimeout(() => {\n                    inputField.style.backgroundColor = '#333';\n                }, 2000);\n            }\n        };\n        \n        // 目录选择器事件\n        document.getElementById('browse-dir-btn').onclick = () => {\n            document.getElementById('dir-picker').click();\n        };\n        \n        document.getElementById('dir-picker').onchange = (e) => {\n            const files = e.target.files;\n            if (files.length > 0) {\n                // 获取选择的目录路径\n                const firstFile = files[0];\n                let dirPath = firstFile.webkitRelativePath;\n                \n                // 提取目录路径（移除文件名部分）\n                const pathParts = dirPath.split('/');\n                if (pathParts.length > 1) {\n                    pathParts.pop(); // 移除文件名\n                    dirPath = pathParts.join('\\\\'); // 使用Windows路径分隔符\n                }\n                \n                // 尝试获取完整路径（如果浏览器支持）\n                if (firstFile.path) {\n                    const fullPath = firstFile.path;\n                    const lastSlash = fullPath.lastIndexOf('\\\\');\n                    if (lastSlash !== -1) {\n                        dirPath = fullPath.substring(0, lastSlash);\n                    }\n                }\n                \n                const inputField = document.getElementById('download-dir-input');\n                inputField.value = dirPath;\n                inputField.style.backgroundColor = '#2a4a2a'; // 绿色提示已选择\n                \n                // 重置预设选择器\n                document.getElementById('preset-dir-select').value = '';\n                \n                // 2秒后恢复原色\n                setTimeout(() => {\n                    inputField.style.backgroundColor = '#333';\n                }, 2000);\n                \n                console.log('选择的目录:', dirPath);\n            }\n        };\n        \n        document.getElementById('save-settings').onclick = () => {\n            const newDir = document.getElementById('download-dir-input').value.trim();\n            if (!newDir) {\n                alert('请输入下载目录路径');\n                return;\n            }\n            \n            // 使用downloadManager的方法设置下载路径\n            downloadManager.setDownloadPath(newDir);\n            \n            // 同时更新config以保持兼容性\n            config.downloadDir = newDir;\n            localStorage.setItem('hanime_download_dir', config.downloadDir);\n            \n            // 重置选择器\n            document.getElementById('preset-dir-select').value = '';\n            \n            alert(`设置已保存\\n下载目录: ${config.downloadDir}`);\n        };\n        \n        document.getElementById('close-settings').onclick = () => {\n            panel.style.display = 'none';\n            // 重置选择器\n            document.getElementById('preset-dir-select').value = '';\n        };\n    }\n    \n    // 创建播放列表面板\n    function createPlaylistPanel() {\n        const panel = document.createElement('div');\n        panel.id = 'hanime-playlist-panel';\n        panel.style.cssText = `\n            position: fixed;\n            top: 20px;\n            left: 20px;\n            width: 350px;\n            max-height: 500px;\n            background: #2a2a2a;\n            border: 1px solid #444;\n            border-radius: 8px;\n            padding: 20px;\n            z-index: 10000;\n            color: white;\n            font-family: Arial, sans-serif;\n            display: none;\n            overflow-y: auto;\n        `;\n        \n        panel.innerHTML = `\n            <h3 style=\"margin-top: 0;\">播放列表</h3>\n            <div id=\"playlist-content\"></div>\n            <button id=\"clear-playlist\" style=\"background: #dc3545; color: white; border: none; padding: 8px 16px; border-radius: 4px; cursor: pointer; margin-top: 10px;\">清空列表</button>\n            <button id=\"close-playlist\" style=\"background: #6c757d; color: white; border: none; padding: 8px 16px; border-radius: 4px; cursor: pointer; margin-left: 10px;\">关闭</button>\n        `;\n        \n        document.body.appendChild(panel);\n        \n        // 绑定事件\n        document.getElementById('clear-playlist').onclick = () => {\n            config.currentPlaylist = [];\n            updatePlaylistDisplay();\n            localStorage.removeItem('hanime_playlist');\n        };\n        \n        document.getElementById('close-playlist').onclick = () => {\n            panel.style.display = 'none';\n        };\n    }\n    \n    // 创建下载管理面板\n    function createDownloadManagerPanel() {\n        const panel = document.createElement('div');\n        panel.id = 'download-manager-panel';\n        panel.style.cssText = `\n            position: fixed;\n            bottom: 20px;\n            right: 20px;\n            width: 400px;\n            max-height: 500px;\n            background: #2a2a2a;\n            border: 1px solid #444;\n            border-radius: 8px;\n            z-index: 10000;\n            color: white;\n            font-family: Arial, sans-serif;\n            display: none;\n            box-shadow: 0 5px 20px rgba(0, 0, 0, 0.3);\n        `;\n        \n        panel.innerHTML = `\n            <div style=\"padding: 15px 20px; border-bottom: 1px solid #444; display: flex; justify-content: space-between; align-items: center;\">\n                <h3 style=\"margin: 0; font-size: 16px;\">📥 下载管理器</h3>\n                <div>\n                    <button id=\"toggle-download-list\" style=\"background: #007bff; color: white; border: none; padding: 6px 12px; border-radius: 4px; cursor: pointer; margin-right: 8px; font-size: 12px;\">收起</button>\n                    <button id=\"close-download-manager\" style=\"background: #6c757d; color: white; border: none; padding: 6px 12px; border-radius: 4px; cursor: pointer; font-size: 12px;\">关闭</button>\n                </div>\n            </div>\n            <div id=\"download-list-content\" style=\"max-height: 400px; overflow-y: auto; padding: 15px;\"></div>\n            <div style=\"padding: 10px 20px; border-top: 1px solid #444; font-size: 12px; color: #aaa; text-align: center;\">\n                <span id=\"download-summary\">总计: 0 个任务</span>\n            </div>\n        `;\n        \n        document.body.appendChild(panel);\n        \n        let isCollapsed = false;\n        \n        // 绑定事件\n        document.getElementById('toggle-download-list').onclick = () => {\n            const content = document.getElementById('download-list-content');\n            const button = document.getElementById('toggle-download-list');\n            \n            if (isCollapsed) {\n                content.style.display = 'block';\n                button.textContent = '收起';\n                isCollapsed = false;\n            } else {\n                content.style.display = 'none';\n                button.textContent = '展开';\n                isCollapsed = true;\n            }\n        };\n        \n        document.getElementById('close-download-manager').onclick = () => {\n            panel.style.display = 'none';\n        };\n        \n        // 更新下载摘要\n        const updateSummary = () => {\n            const summary = document.getElementById('download-summary');\n            if (summary) {\n                const total = downloadManager.downloads.length;\n                const completed = downloadManager.downloads.filter(d => d.status === 'completed').length;\n                const downloading = downloadManager.downloads.filter(d => d.status === 'downloading').length;\n                summary.textContent = `总计: ${total} 个任务 | 已完成: ${completed} | 下载中: ${downloading}`;\n            }\n        };\n        \n        // 重写下载管理器的更新方法以包含摘要更新\n        const originalUpdate = downloadManager.updateDownloadList;\n        downloadManager.updateDownloadList = function() {\n            originalUpdate.call(this);\n            updateSummary();\n        };\n    }\n    \n    // 更新播放列表显示\n    function updatePlaylistDisplay() {\n        const content = document.getElementById('playlist-content');\n        if (!content) return;\n        \n        if (config.currentPlaylist.length === 0) {\n            content.innerHTML = '<p>播放列表为空</p>';\n            return;\n        }\n        \n        content.innerHTML = config.currentPlaylist.map((item, index) => `\n            <div style=\"padding: 8px; border-bottom: 1px solid #444; ${index === config.currentIndex ? 'background: #007bff;' : ''}\">\n                <div style=\"font-weight: bold;\">${item.title}</div>\n                <div style=\"font-size: 12px; color: #ccc;\">${item.url}</div>\n                <button onclick=\"playFromPlaylist(${index})\" style=\"background: #28a745; color: white; border: none; padding: 4px 8px; border-radius: 3px; cursor: pointer; margin-top: 5px;\">播放</button>\n                <button onclick=\"removeFromPlaylist(${index})\" style=\"background: #dc3545; color: white; border: none; padding: 4px 8px; border-radius: 3px; cursor: pointer; margin-left: 5px;\">删除</button>\n            </div>\n        `).join('');\n    }\n    \n    // 添加到播放列表\n    function addToPlaylist(title, url) {\n        const item = { title, url };\n        config.currentPlaylist.push(item);\n        localStorage.setItem('hanime_playlist', JSON.stringify(config.currentPlaylist));\n        updatePlaylistDisplay();\n        showNotification('已添加到播放列表');\n    }\n    \n    // 从播放列表播放\n    window.playFromPlaylist = function(index) {\n        config.currentIndex = index;\n        config.isInPlaylist = true;\n        window.location.href = config.currentPlaylist[index].url;\n    };\n    \n    // 从播放列表删除\n    window.removeFromPlaylist = function(index) {\n        config.currentPlaylist.splice(index, 1);\n        if (config.currentIndex >= index && config.currentIndex > 0) {\n            config.currentIndex--;\n        }\n        localStorage.setItem('hanime_playlist', JSON.stringify(config.currentPlaylist));\n        updatePlaylistDisplay();\n    };\n    \n    // 显示通知\n    function showNotification(message) {\n        const notification = document.createElement('div');\n        notification.style.cssText = `\n            position: fixed;\n            top: 50px;\n            right: 20px;\n            background: #28a745;\n            color: white;\n            padding: 10px 20px;\n            border-radius: 4px;\n            z-index: 10001;\n            font-family: Arial, sans-serif;\n        `;\n        notification.textContent = message;\n        document.body.appendChild(notification);\n        \n        setTimeout(() => {\n            document.body.removeChild(notification);\n        }, 3000);\n    }\n    \n    // 下载管理器\n    const downloadManager = {\n        downloads: [],\n        nextId: 1,\n        downloadPath: '', // 用户设置的下载路径\n        \n        // 初始化设置\n        init() {\n            // 从localStorage加载设置\n            this.downloadPath = localStorage.getItem('hanime_download_path') || '';\n            \n            // 禁用浏览器默认下载行为\n            this.disableBrowserDownload();\n        },\n        \n        // 禁用浏览器默认下载\n        disableBrowserDownload() {\n            // 拦截所有下载链接的点击事件\n            document.addEventListener('click', (e) => {\n                const target = e.target.closest('a[download], a[href$=\".mp4\"], a[href$=\".mkv\"], a[href$=\".avi\"]');\n                if (target && target.href && target.href.includes('hanime')) {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    console.log('已拦截浏览器默认下载:', target.href);\n                    return false;\n                }\n            }, true);\n            \n            // 拦截右键另存为\n            document.addEventListener('contextmenu', (e) => {\n                const target = e.target;\n                if (target.tagName === 'VIDEO' || target.closest('video')) {\n                    // 可以选择是否阻止视频的右键菜单\n                    // e.preventDefault();\n                }\n            });\n        },\n        \n        // 设置下载路径\n        setDownloadPath(path) {\n            this.downloadPath = path;\n            localStorage.setItem('hanime_download_path', path);\n            showNotification(`下载路径已设置: ${path}`);\n        },\n        \n        async addDownload(url, filename, quality) {\n            const download = {\n                id: this.nextId++,\n                url,\n                filename,\n                quality,\n                progress: 0,\n                speed: 0,\n                status: 'validating', // validating, downloading, completed, error, paused\n                startTime: Date.now()\n            };\n            this.downloads.push(download);\n            \n            // 如果需要验证URL，先进行验证\n            if (quality !== 'current') {\n                try {\n                    const response = await fetch(url, { method: 'HEAD' });\n                    if (!response.ok) {\n                        throw new Error(`URL无效: ${response.status} ${response.statusText}`);\n                    }\n                    download.status = 'downloading';\n                } catch (error) {\n                    download.status = 'error';\n                    download.error = `URL验证失败: ${error.message}`;\n                    this.updateDownloadList();\n                    showNotification(`下载失败: ${download.filename} - ${error.message}`, 'error');\n                    return;\n                }\n            } else {\n                download.status = 'downloading';\n            }\n            this.updateDownloadList();\n            this.startDownload(download);\n            return download.id;\n        },\n        \n        async startDownload(download) {\n            try {\n                // 使用fetch API进行真实下载\n                const response = await fetch(download.url);\n                \n                if (!response.ok) {\n                    throw new Error(`下载失败: ${response.status} ${response.statusText}`);\n                }\n                \n                const contentLength = response.headers.get('content-length');\n                const total = parseInt(contentLength, 10);\n                let loaded = download.loaded || 0;\n                \n                // 创建可读流来跟踪下载进度\n                const reader = response.body.getReader();\n                const chunks = download.chunks || [];\n                \n                download.status = 'downloading';\n                download.reader = reader; // 保存reader引用用于暂停\n                const startTime = Date.now();\n                \n                try {\n                    while (true) {\n                        // 检查是否被暂停\n                        if (download.status === 'paused') {\n                            download.loaded = loaded;\n                            download.chunks = chunks;\n                            return;\n                        }\n                        \n                        const { done, value } = await reader.read();\n                        \n                        if (done) break;\n                        \n                        chunks.push(value);\n                        loaded += value.length;\n                        \n                        // 计算真实进度和速度\n                        if (total > 0) {\n                            download.progress = (loaded / total) * 100;\n                        }\n                        \n                        const elapsed = (Date.now() - startTime) / 1000;\n                        download.speed = elapsed > 0 ? (loaded / 1024 / 1024) / elapsed : 0;\n                        \n                        this.updateDownloadList();\n                        \n                        // 添加小延迟以允许UI更新和暂停检查\n                        await new Promise(resolve => setTimeout(resolve, 10));\n                    }\n                } catch (readerError) {\n                    if (download.status === 'paused') {\n                        return; // 正常暂停，不是错误\n                    }\n                    throw readerError;\n                }\n                \n                // 合并所有数据块\n                const blob = new Blob(chunks);\n                \n                // 尝试使用Chrome下载API（如果可用）\n                if (typeof chrome !== 'undefined' && chrome.downloads) {\n                    try {\n                        const url = URL.createObjectURL(blob);\n                        const downloadOptions = {\n                            url: url,\n                            filename: download.filename,\n                            saveAs: false\n                        };\n                        \n                        // 如果设置了下载路径，添加到文件名中\n                        if (this.downloadPath) {\n                            downloadOptions.filename = this.downloadPath.replace(/[\\\\/]+$/, '') + '\\\\' + download.filename;\n                        }\n                        \n                        chrome.downloads.download(downloadOptions, (downloadId) => {\n                            if (chrome.runtime.lastError) {\n                                console.log('Chrome API下载失败，使用备用方法:', chrome.runtime.lastError.message);\n                                this.fallbackDownload(blob, download.filename);\n                            } else {\n                                console.log('Chrome API下载成功，ID:', downloadId, '路径:', downloadOptions.filename);\n                            }\n                            setTimeout(() => URL.revokeObjectURL(url), 1000);\n                        });\n                    } catch (error) {\n                        console.log('Chrome API不可用，使用备用方法:', error.message);\n                        this.fallbackDownload(blob, download.filename);\n                    }\n                } else {\n                    // 备用下载方法\n                    this.fallbackDownload(blob, download.filename);\n                }\n                \n                download.progress = 100;\n                download.status = 'completed';\n                delete download.reader;\n                delete download.loaded;\n                delete download.chunks;\n                this.updateDownloadList();\n                \n                showNotification(`下载完成: ${download.filename}`);\n                \n            } catch (error) {\n                console.error('下载错误:', error);\n                download.status = 'error';\n                download.error = error.message;\n                delete download.reader;\n                this.updateDownloadList();\n                showNotification(`下载失败: ${error.message}`, 'error');\n            }\n        },\n        \n        fallbackDownload(blob, filename) {\n            // 备用下载方法：创建下载链接\n            const url = URL.createObjectURL(blob);\n            const link = document.createElement('a');\n            link.href = url;\n            link.download = filename;\n            link.style.display = 'none';\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n            \n            // 清理URL对象\n            setTimeout(() => URL.revokeObjectURL(url), 1000);\n        },\n        \n        // 暂停下载\n        pauseDownload(id) {\n            const download = this.downloads.find(d => d.id === id);\n            if (download && download.status === 'downloading') {\n                download.status = 'paused';\n                // 如果有reader，尝试取消它\n                if (download.reader) {\n                    try {\n                        download.reader.cancel();\n                    } catch (e) {\n                        console.log('Reader cancel failed:', e);\n                    }\n                }\n                this.updateDownloadList();\n                showNotification(`下载已暂停: ${download.filename}`);\n            }\n        },\n        \n        // 恢复下载\n        resumeDownload(id) {\n            const download = this.downloads.find(d => d.id === id);\n            if (download && download.status === 'paused') {\n                showNotification(`恢复下载: ${download.filename}`);\n                this.startDownload(download);\n            }\n        },\n        \n        removeDownload(id) {\n            this.downloads = this.downloads.filter(d => d.id !== id);\n            this.updateDownloadList();\n        },\n        \n        updateDownloadList() {\n            const container = document.getElementById('download-list-content');\n            if (!container) return;\n            \n            container.innerHTML = '';\n            \n            if (this.downloads.length === 0) {\n                container.innerHTML = '<div style=\"text-align: center; color: #888; padding: 20px;\">暂无下载任务</div>';\n                return;\n            }\n            \n            this.downloads.forEach(download => {\n                const item = document.createElement('div');\n                item.style.cssText = `\n                    background: #333;\n                    margin-bottom: 10px;\n                    padding: 15px;\n                    border-radius: 6px;\n                    border-left: 4px solid ${download.status === 'completed' ? '#28a745' : download.status === 'error' ? '#dc3545' : '#007bff'};\n                `;\n                \n                const statusText = {\n                    'validating': '验证中',\n                    'downloading': '下载中',\n                    'completed': '已完成',\n                    'error': '下载失败',\n                    'paused': '已暂停'\n                }[download.status];\n                \n                item.innerHTML = `\n                    <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px;\">\n                        <div style=\"font-weight: bold; color: white; flex: 1; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;\">${download.filename}</div>\n                        <div>\n                            <button class=\"pause-btn\" data-id=\"${download.id}\" style=\"background: #ffc107; color: #000; border: none; padding: 4px 8px; border-radius: 3px; cursor: pointer; font-size: 12px; margin-right: 5px; display: ${download.status === 'downloading' ? 'inline-block' : 'none'};\">暂停</button>\n                            <button class=\"resume-btn\" data-id=\"${download.id}\" style=\"background: #28a745; color: white; border: none; padding: 4px 8px; border-radius: 3px; cursor: pointer; font-size: 12px; margin-right: 5px; display: ${download.status === 'paused' ? 'inline-block' : 'none'};\">恢复</button>\n                            <button class=\"delete-btn\" data-id=\"${download.id}\" style=\"background: #dc3545; color: white; border: none; padding: 4px 8px; border-radius: 3px; cursor: pointer; font-size: 12px;\">删除</button>\n                        </div>\n                    </div>\n                    <div style=\"color: #ccc; font-size: 12px; margin-bottom: 5px;\">${download.quality} | ${statusText}</div>\n                    ${download.error ? `<div style=\"color: #dc3545; font-size: 11px; margin-bottom: 5px;\">错误: ${download.error}</div>` : ''}\n                    <div style=\"background: #555; height: 6px; border-radius: 3px; overflow: hidden; margin-bottom: 5px;\">\n                        <div style=\"background: ${download.status === 'completed' ? '#28a745' : download.status === 'error' ? '#dc3545' : '#007bff'}; height: 100%; width: ${download.progress}%; transition: width 0.3s;\"></div>\n                    </div>\n                    <div style=\"display: flex; justify-content: space-between; font-size: 11px; color: #aaa;\">\n                        <span>${Math.round(download.progress)}%</span>\n                        <span>${download.status === 'downloading' ? download.speed.toFixed(1) + ' MB/s' : ''}</span>\n                    </div>\n                `;\n                \n                // 添加事件监听器\n                const pauseBtn = item.querySelector('.pause-btn');\n                const resumeBtn = item.querySelector('.resume-btn');\n                const deleteBtn = item.querySelector('.delete-btn');\n                \n                if (pauseBtn) {\n                    pauseBtn.addEventListener('click', () => this.pauseDownload(download.id));\n                }\n                if (resumeBtn) {\n                    resumeBtn.addEventListener('click', () => this.resumeDownload(download.id));\n                }\n                if (deleteBtn) {\n                    deleteBtn.addEventListener('click', () => this.removeDownload(download.id));\n                }\n                \n                container.appendChild(item);\n            });\n        }\n    };\n    \n    // 移除了复杂的视频质量抓取功能，现在直接使用当前播放的视频\n    \n    // 获取视频标题\n    function getVideoTitle() {\n        // 尝试多种选择器来获取视频标题\n        const titleSelectors = [\n            'h1.video-title',\n            '.video-title',\n            'h1[class*=\"title\"]',\n            '.title',\n            'h1',\n            'h2',\n            '[data-title]'\n        ];\n        \n        for (const selector of titleSelectors) {\n            const element = document.querySelector(selector);\n            if (element && element.textContent.trim()) {\n                let title = element.textContent.trim();\n                // 清理标题，移除多余的空白和特殊字符\n                title = title.replace(/\\s+/g, ' ').trim();\n                // 如果标题不是页面标题且长度合理，则使用它\n                if (title !== document.title && title.length > 3 && title.length < 200) {\n                    return title;\n                }\n            }\n        }\n        \n        // 如果没有找到合适的视频标题，尝试从页面标题中提取\n        let pageTitle = document.title;\n        // 移除常见的网站后缀\n        pageTitle = pageTitle.replace(/\\s*-\\s*Hanime1\\.me.*$/i, '');\n        pageTitle = pageTitle.replace(/\\s*\\|\\s*Hanime.*$/i, '');\n        pageTitle = pageTitle.trim();\n        \n        return pageTitle || 'video';\n    }\n    \n    // 移除了复杂的质量选择器，现在直接下载当前播放的视频\n    \n    // 主下载函数\n    async function downloadVideo() {\n        const video = document.querySelector('video');\n        if (!video) {\n            alert('未找到视频元素');\n            return;\n        }\n        \n        const videoSrc = video.src || video.currentSrc;\n        if (!videoSrc) {\n            alert('无法获取视频链接');\n            return;\n        }\n        \n        // 直接下载当前播放的视频\n        const videoTitle = getVideoTitle();\n        const filename = `${videoTitle}.mp4`;\n        \n        showNotification('开始下载当前视频...', 'info');\n        downloadManager.addDownload(videoSrc, filename);\n        \n        // 显示下载管理器\n        const panel = document.getElementById('download-manager-panel');\n        if (panel) {\n            panel.style.display = 'block';\n        }\n    }\n    \n    // 移除了视频预览功能，专注于点击跳转\n    \n    // 添加视频封面点击跳转功能\nfunction addVideoThumbnailClick() {\n        // 只处理视频相关的图片，避免影响其他功能\n        const videoImages = document.querySelectorAll(\n            'img[src*=\"thumb\"], img[src*=\"cover\"], img[src*=\"preview\"], ' +\n            '.video-thumbnail img, .video-item img, .video-card img, ' +\n            '[class*=\"video\"] img, [data-video-id] img'\n        );\n        \n        videoImages.forEach(img => {\n            // 检查是否已经处理过\n            if (img.dataset.clickHandlerAdded) return;\n            \n            // 查找最近的包含视频链接的父元素\n            let parentLink = img.closest('a[href*=\"/watch/\"], a[href*=\"/video/\"]');\n            \n            if (parentLink && parentLink.href) {\n                // 如果图片已经在链接内，只添加视觉效果，不干扰原有点击\n                if (!img.style.cursor) {\n                    img.style.cursor = 'pointer';\n                }\n                img.style.transition = 'all 0.2s ease';\n                \n                // 添加轻微的悬停效果，不影响原有功能\n                img.addEventListener('mouseenter', () => {\n                    if (!img.dataset.hoverActive) {\n                        img.style.opacity = '0.9';\n                        img.dataset.hoverActive = 'true';\n                    }\n                });\n                \n                img.addEventListener('mouseleave', () => {\n                    img.style.opacity = '1';\n                    img.dataset.hoverActive = 'false';\n                });\n                \n                img.dataset.clickHandlerAdded = 'true';\n                console.log('已为链接内图片添加悬停效果:', parentLink.href);\n            } else {\n                // 只为确实没有链接的视频图片添加点击功能\n                const videoContainer = img.closest('[class*=\"video\"], [id*=\"video\"], [data-video]');\n                if (videoContainer && !videoContainer.querySelector('a[href*=\"/watch/\"], a[href*=\"/video/\"]')) {\n                    const videoId = extractVideoIdFromThumbnail(img);\n                    if (videoId) {\n                        img.style.cursor = 'pointer';\n                        img.style.transition = 'all 0.2s ease';\n                        \n                        // 使用更安全的事件处理，避免冲突\n                        const clickHandler = (e) => {\n                            // 确保不是在其他交互元素上点击\n                            if (e.target === img && !e.defaultPrevented) {\n                                e.preventDefault();\n                                e.stopPropagation();\n                                const videoUrl = `${window.location.origin}/watch/${videoId}`;\n                                console.log('跳转到视频页面:', videoUrl);\n                                window.location.href = videoUrl;\n                            }\n                        };\n                        \n                        img.addEventListener('click', clickHandler, { passive: false });\n                        \n                        // 添加悬停效果\n                        img.addEventListener('mouseenter', () => {\n                            if (!img.dataset.hoverActive) {\n                                img.style.opacity = '0.9';\n                                img.dataset.hoverActive = 'true';\n                            }\n                        });\n                        \n                        img.addEventListener('mouseleave', () => {\n                            img.style.opacity = '1';\n                            img.dataset.hoverActive = 'false';\n                        });\n                        \n                        img.dataset.clickHandlerAdded = 'true';\n                        console.log('已为无链接图片添加点击功能:', videoUrl);\n                    }\n                }\n            }\n        });\n        \n        // 谨慎处理视频卡片容器的点击，避免干扰原有功能\n        const videoCardSelectors = [\n            '.video-item:not([data-click-handled])',\n            '.video-card:not([data-click-handled])',\n            '.video-thumbnail:not([data-click-handled])'\n        ];\n        \n        videoCardSelectors.forEach(selector => {\n            const cards = document.querySelectorAll(selector);\n            cards.forEach(card => {\n                if (card.dataset.clickHandlerAdded) return;\n                \n                // 查找卡片内的链接\n                const link = card.querySelector('a[href*=\"/watch/\"], a[href*=\"/video/\"]');\n                if (link && link.href) {\n                    // 检查是否已有点击处理器\n                    const hasExistingHandlers = card.onclick || \n                        card.getAttribute('onclick') || \n                        card.dataset.clickHandled;\n                    \n                    if (!hasExistingHandlers) {\n                        // 只在安全的情况下添加点击处理\n                        const clickHandler = (e) => {\n                            // 更严格的检查，避免干扰其他交互\n                            if (e.target === card || \n                                (!e.target.closest('a, button, input, select, textarea') && \n                                 !e.target.onclick && \n                                 !e.target.getAttribute('onclick'))) {\n                                e.preventDefault();\n                                console.log('卡片点击跳转:', link.href);\n                                window.location.href = link.href;\n                            }\n                        };\n                        \n                        card.addEventListener('click', clickHandler, { passive: false });\n                        card.style.cursor = 'pointer';\n                    }\n                    \n                    card.dataset.clickHandlerAdded = 'true';\n                }\n            });\n        });\n    }\n    \n    // 从缩略图中提取视频ID\n    function extractVideoIdFromThumbnail(thumbnail) {\n        // 尝试从src属性中提取\n        const src = thumbnail.src || thumbnail.dataset.src || thumbnail.dataset.original;\n        if (src) {\n            // 匹配常见的视频ID模式\n            const patterns = [\n                /\\/([a-zA-Z0-9_-]+)\\.(jpg|jpeg|png|webp)/,\n                /thumb\\/([a-zA-Z0-9_-]+)/,\n                /cover\\/([a-zA-Z0-9_-]+)/,\n                /preview\\/([a-zA-Z0-9_-]+)/,\n                /([a-zA-Z0-9_-]{8,})/\n            ];\n            \n            for (const pattern of patterns) {\n                const match = src.match(pattern);\n                if (match && match[1]) {\n                    return match[1];\n                }\n            }\n        }\n        \n        // 尝试从data属性中提取\n        const dataId = thumbnail.dataset.videoId || thumbnail.dataset.id;\n        if (dataId) {\n            return dataId;\n        }\n        \n        // 尝试从父元素的属性中提取\n        const parent = thumbnail.closest('[data-video-id], [data-id]');\n        if (parent) {\n            return parent.dataset.videoId || parent.dataset.id;\n        }\n        \n        return null;\n    }\n    \n    // 屏蔽广告\n    function blockAds() {\n        const adSelectors = [\n            '.ad', '.ads', '.advertisement', '.banner',\n            '[class*=\"ad-\"]', '[id*=\"ad-\"]',\n            'iframe[src*=\"ads\"]', 'iframe[src*=\"doubleclick\"]',\n            '.popup', '.overlay', '.modal',\n            \n            // 用户指定的广告选择器\n            '#content-div > div.row.no-gutter.video-show-width > div.col-md-3.single-show-list > div:nth-child(1)',\n            \n            // 相似特征的广告选择器\n            '#content-div .col-md-3.single-show-list > div:first-child',\n            '.col-md-3.single-show-list > div:nth-child(1)',\n            '.single-show-list > div:first-child',\n            '[class*=\"single-show-list\"] > div:first-child',\n            \n            // 基于实际网站结构的广告选择器\n            // Exoclick 广告\n            'div[id*=\"exoclick\"]',\n            'div[class*=\"exoclick\"]',\n            'script[src*=\"exoclick\"]',\n            \n            // JuicyAds 广告（基于实际网站分析）\n            'div[id*=\"juicyads\"]',\n            'div[class*=\"juicyads\"]',\n            'script[src*=\"juicyads\"]',\n            'a[href*=\"juicyads.com\"]',\n            'a[href*=\"ck.juicyads.com\"]',\n            'a[href*=\"ux13.juicyads.com\"]',\n            'img[src*=\"ads.juicyads.me\"]',\n            'img[src*=\"juicyads\"]',\n            'table:has(a[href*=\"juicyads\"])',\n            'td:has(a[href*=\"juicyads\"])',\n            'tr:has(a[href*=\"juicyads\"])',\n            \n            // Google Ads\n            'div[id*=\"google_ads\"]',\n            'div[class*=\"google-ads\"]',\n            'script[src*=\"googlesyndication\"]',\n            'iframe[src*=\"googlesyndication\"]',\n            \n            // 弹窗广告相关\n            '.stripchat-popunder',\n            '.home-card-popunder',\n            'a[class*=\"popunder\"]',\n            'div[class*=\"popunder\"]',\n            \n            // 高z-index元素（通常是广告）\n            'div[style*=\"z-index: 9999\"]',\n            'div[style*=\"z-index: 99999\"]',\n            'div[style*=\"z-index: 999999\"]',\n            'div[style*=\"z-index: 10000\"]',\n            \n            // 固定定位的可疑元素\n            'div[style*=\"position: fixed\"][style*=\"width: 100%\"][style*=\"height: 100%\"]',\n            'div[style*=\"position: fixed\"][style*=\"top: 0\"][style*=\"left: 0\"]',\n            'div[style*=\"position: fixed\"][style*=\"bottom: 0\"]',\n            \n            // 广告脚本和iframe\n            'iframe[src*=\"exoclick\"]',\n            'iframe[src*=\"juicyads\"]',\n            'script[src*=\"ads\"]',\n            'script[src*=\"advertising\"]',\n            'script[data-cfasync=\"false\"]',\n            \n            // 外部广告链接（基于实际网站分析）\n            'a[href*=\"l.labsda.com\"]',\n            'a[href*=\"l.erodatalabs.com\"]',\n            'a[href*=\"l.sqzkm.com\"]',\n            'img[src*=\"erolabs\"]',\n            \n            // 包含广告文本的元素\n            '*:contains(\"點點廣告，贊助我們\")',\n            '*:contains(\"Ads by JuicyAds\")',\n            '*:contains(\"Advertisement\")',\n            \n            // 表格形式的广告\n            'table[style*=\"width\"][style*=\"height\"]:has(a[href*=\"ads\"])',\n            'table:has(img[src*=\"ads\"])',\n            'table:has(a[href*=\"juicyads\"])',\n            'table:has(a[href*=\"exoclick\"])'\n        ];\n        \n        let blockedCount = 0;\n        \n        // 注入CSS样式来隐藏广告\n        const style = document.createElement('style');\n        style.textContent = `\n            /* 隐藏JuicyAds广告 */\n            a[href*=\"juicyads.com\"],\n            a[href*=\"ck.juicyads.com\"],\n            a[href*=\"ux13.juicyads.com\"],\n            img[src*=\"ads.juicyads.me\"],\n            table:has(a[href*=\"juicyads\"]),\n            /* 隐藏外部广告链接 */\n            a[href*=\"l.labsda.com\"],\n            a[href*=\"l.erodatalabs.com\"],\n            a[href*=\"l.sqzkm.com\"],\n            /* 隐藏广告脚本 */\n            script[src*=\"juicyads\"],\n            script[src*=\"exoclick\"],\n            iframe[src*=\"juicyads\"],\n            iframe[src*=\"exoclick\"] {\n                display: none !important;\n                visibility: hidden !important;\n                opacity: 0 !important;\n                height: 0 !important;\n                width: 0 !important;\n                position: absolute !important;\n                left: -9999px !important;\n                top: -9999px !important;\n                z-index: -1 !important;\n            }\n        `;\n        document.head.appendChild(style);\n        \n        // 拦截广告元素\n        adSelectors.forEach(selector => {\n            try {\n                const elements = document.querySelectorAll(selector);\n                elements.forEach(el => {\n                    if (el && !el.hasAttribute('data-blocked')) {\n                        // 多重隐藏确保广告被完全屏蔽\n                        el.style.setProperty('display', 'none', 'important');\n                        el.style.setProperty('visibility', 'hidden', 'important');\n                        el.style.setProperty('opacity', '0', 'important');\n                        el.style.setProperty('height', '0', 'important');\n                        el.style.setProperty('width', '0', 'important');\n                        el.style.setProperty('overflow', 'hidden', 'important');\n                        el.style.setProperty('position', 'absolute', 'important');\n                        el.style.setProperty('left', '-9999px', 'important');\n                        el.style.setProperty('top', '-9999px', 'important');\n                        el.style.setProperty('z-index', '-1', 'important');\n                        \n                        // 移除事件监听器\n                        if (el.onclick) el.onclick = null;\n                        if (el.onmousedown) el.onmousedown = null;\n                        if (el.onmouseup) el.onmouseup = null;\n                        if (el.addEventListener) {\n                            el.removeEventListener('click', function() {});\n                            el.removeEventListener('mousedown', function() {});\n                        }\n                        \n                        // 移除元素\n                        try {\n                            if (el.parentNode) {\n                                el.parentNode.removeChild(el);\n                            }\n                        } catch (e) {\n                            // 如果无法移除，至少隐藏\n                            el.style.setProperty('display', 'none', 'important');\n                        }\n                        \n                        // 标记为已拦截\n                        el.setAttribute('data-blocked', 'true');\n                        \n                        blockedCount++;\n                        console.log('已拦截广告元素:', selector, el);\n                    }\n                });\n            } catch (e) {\n                console.log('选择器错误:', selector, e.message);\n            }\n        });\n        \n        // 拦截弹窗事件\n        const originalOpen = window.open;\n        window.open = function(url, name, specs) {\n            console.log('拦截弹窗:', url);\n            return null;\n        };\n        \n        // 拦截广告相关的点击事件\n        document.addEventListener('click', function(e) {\n            const target = e.target;\n            if (target && (\n                target.classList.contains('stripchat-popunder') ||\n                target.classList.contains('home-card-popunder') ||\n                target.className.includes('popunder') ||\n                target.href && (target.href.includes('exoclick') || target.href.includes('juicyads'))\n            )) {\n                e.preventDefault();\n                e.stopPropagation();\n                console.log('拦截广告点击:', target);\n                return false;\n            }\n        }, true);\n        \n        if (blockedCount > 0) {\n            console.log(`本次拦截了 ${blockedCount} 个广告元素`);\n        }\n        \n        // 使用MutationObserver监控DOM变化\n        if (!window.adBlockObserver) {\n            window.adBlockObserver = new MutationObserver(function(mutations) {\n                let hasNewAds = false;\n                mutations.forEach(function(mutation) {\n                    if (mutation.type === 'childList') {\n                        mutation.addedNodes.forEach(function(node) {\n                            if (node.nodeType === 1) { // Element node\n                                // 检查新添加的节点是否是广告\n                                adSelectors.forEach(selector => {\n                                    try {\n                                        if (node.matches && node.matches(selector)) {\n                                            hasNewAds = true;\n                                        }\n                                        // 检查子元素\n                                        const childAds = node.querySelectorAll && node.querySelectorAll(selector);\n                                        if (childAds && childAds.length > 0) {\n                                            hasNewAds = true;\n                                        }\n                                    } catch (e) {\n                                        // 忽略选择器错误\n                                    }\n                                });\n                            }\n                        });\n                    }\n                });\n                \n                if (hasNewAds) {\n                    console.log('检测到新的广告元素，重新运行拦截');\n                    setTimeout(blockAds, 100);\n                }\n            });\n            \n            // 开始观察\n            window.adBlockObserver.observe(document.body, {\n                childList: true,\n                subtree: true\n            });\n        }\n        \n        // 设置定时器持续监控新的广告\n        setTimeout(() => {\n            blockAds();\n        }, 3000);\n        \n        // 页面加载完成后再次检查\n        if (document.readyState === 'loading') {\n            document.addEventListener('DOMContentLoaded', () => {\n                setTimeout(blockAds, 1000);\n            });\n        }\n        \n        // 窗口加载完成后再次检查\n        window.addEventListener('load', () => {\n            setTimeout(blockAds, 2000);\n        });\n    }\n    \n    // 键盘快捷键处理\n    function handleKeyboardShortcuts(e) {\n        // Alt+左箭头 后退\n        if (e.altKey && e.key === 'ArrowLeft') {\n            e.preventDefault();\n            window.history.back();\n        }\n        \n        // Alt+右箭头 前进\n        if (e.altKey && e.key === 'ArrowRight') {\n            e.preventDefault();\n            window.history.forward();\n        }\n        \n        // F5 刷新\n        if (e.key === 'F5') {\n            // 不阻止默认行为，让浏览器正常刷新\n            return;\n        }\n        \n        // Ctrl+D 下载\n        if (e.ctrlKey && e.key === 'd') {\n            e.preventDefault();\n            downloadVideo().catch(console.error);\n        }\n        \n        // Ctrl+S 设置\n        if (e.ctrlKey && e.key === 's') {\n            e.preventDefault();\n            const panel = document.getElementById('hanime-settings-panel');\n            panel.style.display = panel.style.display === 'none' ? 'block' : 'none';\n        }\n        \n        // Ctrl+P 播放列表\n        if (e.ctrlKey && e.key === 'p') {\n            e.preventDefault();\n            const panel = document.getElementById('hanime-playlist-panel');\n            panel.style.display = panel.style.display === 'none' ? 'block' : 'none';\n        }\n        \n        // Ctrl+M 下载管理器\n        if (e.ctrlKey && e.key === 'm') {\n            e.preventDefault();\n            const panel = document.getElementById('download-manager-panel');\n            panel.style.display = panel.style.display === 'none' ? 'block' : 'none';\n        }\n        \n        // Ctrl+H 主页\n        if (e.ctrlKey && e.key === 'h') {\n            e.preventDefault();\n            window.location.href = '/';\n        }\n        \n        // Home 页面顶部\n        if (e.key === 'Home') {\n            e.preventDefault();\n            window.scrollTo({ top: 0, behavior: 'smooth' });\n        }\n        \n        // End 页面底部\n        if (e.key === 'End') {\n            e.preventDefault();\n            window.scrollTo({ top: document.body.scrollHeight, behavior: 'smooth' });\n        }\n        \n        // 空格键 播放/暂停\n        if (e.key === ' ') {\n            const video = document.querySelector('video');\n            if (video) {\n                e.preventDefault();\n                if (video.paused) {\n                    video.play();\n                } else {\n                    video.pause();\n                }\n            }\n        }\n    }\n    \n    // 长按右箭头倍速播放\n    let speedBoostTimeout;\n    function handleSpeedBoost() {\n        document.addEventListener('keydown', (e) => {\n            if (e.key === 'ArrowRight' && !speedBoostTimeout) {\n                speedBoostTimeout = setTimeout(() => {\n                    const video = document.querySelector('video');\n                    if (video) {\n                        video.playbackRate = 2;\n                        showNotification('倍速播放中');\n                    }\n                }, 500); // 长按500ms后触发\n            }\n        });\n        \n        document.addEventListener('keyup', (e) => {\n            if (e.key === 'ArrowRight') {\n                if (speedBoostTimeout) {\n                    clearTimeout(speedBoostTimeout);\n                    speedBoostTimeout = null;\n                }\n                const video = document.querySelector('video');\n                if (video && video.playbackRate !== 1) {\n                    video.playbackRate = 1;\n                    showNotification('恢复正常播放');\n                }\n            }\n        });\n    }\n    \n    // 视频播放完成处理\n    function handleVideoEnd() {\n        const video = document.querySelector('video');\n        if (!video) return;\n        \n        video.addEventListener('ended', () => {\n            if (config.isInPlaylist && config.currentPlaylist.length > 0) {\n                // 播放列表中的下一个视频\n                config.currentIndex = (config.currentIndex + 1) % config.currentPlaylist.length;\n                window.location.href = config.currentPlaylist[config.currentIndex].url;\n            } else {\n                // 重复播放当前视频\n                video.currentTime = 0;\n                video.play();\n                showNotification('重复播放当前视频');\n            }\n        });\n    }\n    \n    // 创建浮动控制按钮\n    function createFloatingControls() {\n        const controls = document.createElement('div');\n        controls.id = 'hanime-floating-controls';\n        controls.style.cssText = `\n            position: fixed;\n            bottom: 20px;\n            left: 50%;\n            transform: translateX(-50%);\n            z-index: 9999;\n            display: flex;\n            flex-direction: row;\n            gap: 2px;\n            background: #f1f3f4;\n            border-radius: 25px;\n            padding: 8px;\n            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n            backdrop-filter: blur(10px);\n            border: 1px solid #dadce0;\n        `;\n        \n        const buttons = [\n            { text: '←', title: '后退 (Alt+←)', action: () => window.history.back() },\n            { text: '→', title: '前进 (Alt+→)', action: () => window.history.forward() },\n            { text: '↻', title: '刷新 (F5)', action: () => window.location.reload() },\n            { text: '🏠', title: '主页 (Ctrl+H)', action: () => window.location.href = '/' },\n            { text: '⚙️', title: '设置 (Ctrl+S)', action: () => {\n                const panel = document.getElementById('hanime-settings-panel');\n                panel.style.display = panel.style.display === 'none' ? 'block' : 'none';\n            }},\n            { text: '📋', title: '播放列表 (Ctrl+P)', action: () => {\n                const panel = document.getElementById('hanime-playlist-panel');\n                panel.style.display = panel.style.display === 'none' ? 'block' : 'none';\n            }},\n            { text: '📥', title: '下载管理器 (Ctrl+M)', action: () => {\n                const panel = document.getElementById('download-manager-panel');\n                panel.style.display = panel.style.display === 'none' ? 'block' : 'none';\n            }},\n            { text: '⬇️', title: '下载视频 (Ctrl+D)', action: () => downloadVideo().catch(console.error) },\n            { text: '➕', title: '添加到播放列表', action: () => {\n                const videoTitle = getVideoTitle();\n                addToPlaylist(videoTitle, window.location.href);\n            }}\n        ];\n        \n        buttons.forEach((btn, index) => {\n            const button = document.createElement('button');\n            button.textContent = btn.text;\n            button.title = btn.title;\n            button.style.cssText = `\n                min-width: 36px;\n                height: 36px;\n                border: none;\n                border-radius: 18px;\n                background: transparent;\n                color: #5f6368;\n                font-size: 14px;\n                cursor: pointer;\n                transition: all 0.2s ease;\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                font-weight: 500;\n                padding: 0 8px;\n                position: relative;\n            `;\n            \n            // 添加分隔线\n            if (index === 3 || index === 6) {\n                const separator = document.createElement('div');\n                separator.style.cssText = `\n                    width: 1px;\n                    height: 20px;\n                    background: #dadce0;\n                    margin: 0 4px;\n                `;\n                controls.appendChild(separator);\n            }\n            \n            button.onmouseover = () => {\n                button.style.background = '#e8eaed';\n                button.style.color = '#202124';\n            };\n            \n            button.onmouseout = () => {\n                button.style.background = 'transparent';\n                button.style.color = '#5f6368';\n            };\n            \n            button.onmousedown = () => {\n                button.style.background = '#dadce0';\n            };\n            \n            button.onmouseup = () => {\n                button.style.background = '#e8eaed';\n            };\n            \n            button.onclick = btn.action;\n            controls.appendChild(button);\n        });\n        \n        // 添加页面顶部和底部按钮（保持在右侧）\n        const verticalControls = document.createElement('div');\n        verticalControls.id = 'hanime-vertical-controls';\n        verticalControls.style.cssText = `\n            position: fixed;\n            top: 50%;\n            right: 20px;\n            transform: translateY(-50%);\n            z-index: 9999;\n            display: flex;\n            flex-direction: column;\n            gap: 10px;\n        `;\n        \n        const verticalButtons = [\n            { text: '⬆️', title: '回到顶部 (Home)', action: () => window.scrollTo({ top: 0, behavior: 'smooth' }) },\n            { text: '⬇️', title: '滚动到底部 (End)', action: () => window.scrollTo({ top: document.body.scrollHeight, behavior: 'smooth' }) }\n        ];\n        \n        verticalButtons.forEach(btn => {\n            const button = document.createElement('button');\n            button.textContent = btn.text;\n            button.title = btn.title;\n            button.style.cssText = `\n                width: 45px;\n                height: 45px;\n                border: none;\n                border-radius: 50%;\n                background: #f1f3f4;\n                color: #5f6368;\n                font-size: 16px;\n                cursor: pointer;\n                box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n                transition: all 0.2s ease;\n                border: 1px solid #dadce0;\n            `;\n            \n            button.onmouseover = () => {\n                button.style.background = '#e8eaed';\n                button.style.color = '#202124';\n                button.style.transform = 'scale(1.05)';\n            };\n            \n            button.onmouseout = () => {\n                button.style.background = '#f1f3f4';\n                button.style.color = '#5f6368';\n                button.style.transform = 'scale(1)';\n            };\n            \n            button.onclick = btn.action;\n            verticalControls.appendChild(button);\n        });\n        \n        document.body.appendChild(controls);\n        document.body.appendChild(verticalControls);\n    }\n    \n    // 初始化\n    function init() {\n        // 初始化下载管理器\n        downloadManager.init();\n        \n        // 加载保存的播放列表\n        const savedPlaylist = localStorage.getItem('hanime_playlist');\n        if (savedPlaylist) {\n            config.currentPlaylist = JSON.parse(savedPlaylist);\n        }\n        \n        // 检查当前页面是否在播放列表中\n        const currentUrl = window.location.href;\n        const currentIndex = config.currentPlaylist.findIndex(item => item.url === currentUrl);\n        if (currentIndex !== -1) {\n            config.currentIndex = currentIndex;\n            config.isInPlaylist = true;\n        }\n        \n        // 创建UI组件\n        createSettingsPanel();\n        createPlaylistPanel();\n        createDownloadManagerPanel();\n        createFloatingControls();\n        \n        // 绑定事件\n        document.addEventListener('keydown', handleKeyboardShortcuts);\n        handleSpeedBoost();\n        \n        // 等待页面加载完成后执行\n        setTimeout(() => {\n            addVideoThumbnailClick();\n            handleVideoEnd();\n            blockAds();\n            \n            // 定期清理广告和重新绑定点击事件（降低频率，减少性能影响）\n            setInterval(() => {\n                blockAds();\n                // 只在检测到新内容时才重新绑定\n                const newImages = document.querySelectorAll('img:not([data-click-handler-added])');\n                if (newImages.length > 0) {\n                    addVideoThumbnailClick();\n                }\n            }, 8000); // 增加到8秒，减少性能影响\n        }, 2000);\n        \n        updatePlaylistDisplay();\n        \n        console.log('Hanime1.me 增强功能已加载');\n    }\n    \n    // 页面加载完成后初始化\n    if (document.readyState === 'loading') {\n        document.addEventListener('DOMContentLoaded', init);\n    } else {\n        init();\n    }\n})();","isHtml":false,"htmlPath":"","htmlFiles":[],"more":{"windows":{"label":"","title":"","url":"https://hanime1.me/","userAgent":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36","width":1200,"height":800,"theme":null,"resizable":true,"fullscreen":false,"maximized":false,"minWidth":400,"minHeight":300,"maxWidth":1920,"maxHeight":1080,"decorations":true,"transparent":false,"titleBarStyle":"Visible","visible":true,"focus":true,"closable":true,"minimizable":true,"maximizable":true,"alwaysOnTop":false,"alwaysOnBottom":false,"center":false,"skipTaskbar":false,"tabbingIdentifier":null,"parent":null,"dragDropEnabled":true,"browserExtensionsEnabled":false,"devtools":true,"contentProtected":false,"hiddenTitle":false,"incognito":false,"proxyUrl":null,"useHttpsScheme":false,"zoomHotkeysEnabled":false,"acceptFirstMouse":false,"create":false}},"phone":{"safeArea":{"top":0,"bottom":0,"left":0,"right":0},"header":{"show":false,"title":"","backgroundColor":"","color":"","fontSize":16,"fontWeight":"bold","loading":false,"toolBar":false,"toolBarBackgroundColor":"","toolBarColor":"","toolBarFontSize":16,"toolBarFontWeight":"bold"},"siderMenu":{"show":false,"width":0,"backgroundColor":"","color":"","fontSize":16,"fontWeight":"bold","title":"","titleColor":"","titleFontSize":16,"titleFontWeight":"bold"},"tabBar":{"show":false,"backgroundColor":"","color":"","activeColor":"","fontSize":16,"fontWeight":"bold","tabBarItem":[]},"webview":{"userAgent":"","javaScriptEnabled":true,"domStorageEnabled":true,"allowFileAccess":true,"loadWithOverviewMode":true,"setSupportZoom":true,"clearCache":true}},"ios":{"name":"hanime1","showName":"hanime1","version":"0.0.2","webUrl":"https://hanime1.me/","id":"com.hanime1.app.ios","icon":"./app-icon.png","desc":"Package for personal use only, please do not use for commercial purposes（打包仅限个人使用，请勿用于传播或商业用途）","pubBody":"Package for personal use only, please do not use for commercial purposes（打包仅限个人使用，请勿用于传播或商业用途）","isHtml":false,"debug":false},"android":{"name":"hanime1","showName":"hanime1","version":"0.0.2","webUrl":"https://hanime1.me/","id":"com.hanime1.app.android","icon":"./app-icon.png","input":"./app-icon.png","output":"./res","rounded":true,"copyTo":"./app/src/main/res","androidResDir":"./app/src/main/res","desc":"Package for personal use only, please do not use for commercial purposes（打包仅限个人使用，请勿用于传播或商业用途）","pubBody":"Package for personal use only, please do not use for commercial purposes（打包仅限个人使用，请勿用于传播或商业用途）","isHtml":false,"debug":false},"desktop":{"name":"hanime1","showName":"hanime1","version":"0.0.2","id":"com.hanime1.app.desktop","desc":"Package for personal use only, please do not use for commercial purposes（打包仅限个人使用，请勿用于传播或商业用途，否则后果自负）","webUrl":"https://hanime1.me/","iconPath":"../app-icon.png","inputPath":"../app-icon.png","tempPath":"./processed-image.png","icnsPath":"../src-tauri/icons/icon.icns","pubBody":"Package for personal use only, please do not use for commercial purposes（打包仅限个人使用，请勿用于传播或商业用途，否则后果自负）","isHtml":false,"single":true,"state":true,"injectJq":false,"tauriApi":false,"debug":true,"buildMethod":"cloud"}}